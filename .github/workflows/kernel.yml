name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: LoadEnv
        id: env
        uses: duskmoon314/action-load-env@v1
        with:
          files: |
            env

      - name: Cache
        id: cached
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/cached
          key: Workspace

      - name: Prepare
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
          
          echo "CACHE_DIR=$GITHUB_WORKSPACE/cached" >> $GITHUB_ENV
          echo "RELEASE_DIR=$GITHUB_WORKSPACE/release" >> $GITHUB_ENV

          echo "PREBUILTS_CLANG_PATH=$(pwd)/clang-aosp" >> $GITHUB_ENV
          echo "PREBUILTS_GCC_AOSP_PATH=$(pwd)/gcc-aosp" >> $GITHUB_ENV
          echo "PREBUILTS_LIBUFDT_PATH=$(pwd)/libufdt" >> $GITHUB_ENV

          echo "KBUILD_BUILD_HOST=Github" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)" >> $GITHUB_ENV

          # mkdir
          source $GITHUB_ENV
          mkdir $CACHE_DIR 2>/dev/null || true
          mkdir $RELEASE_DIR 2>/dev/null || true

          # ccache
          echo "CCACHE_DIR=$CACHE_DIR/ccache" >> $GITHUB_ENV

      - name: Install system packages
        run: |
          sudo apt update >/dev/null 2>/dev/null
          sudo apt install -y $(cat .syspkgs)

      - name: Install AOSP prebuilts
        run: |
          _fetch_unpack_tgz() {
              [ ! -f $2 ] && curl -L $1 -o $2
              [ ! -d $3 ] && mkdir -p $3
              tar -C $3 -zxvf $2
          }
          _fetch_unpack_tgz $PACKAGE_CLANG $CACHE_DIR/clang-$(basename $PACKAGE_CLANG) $PREBUILTS_CLANG_PATH
          _fetch_unpack_tgz $PACKAGE_GCC_AOSP $CACHE_DIR/gcc-$(basename $PACKAGE_GCC_AOSP) $PREBUILTS_GCC_AOSP_PATH
          _fetch_unpack_tgz $PACKAGE_LIBUFDT $CACHE_DIR/libufdt-$(basename $PACKAGE_LIBUFDT) $PREBUILTS_LIBUFDT_PATH

      - name: Download source
        run: |
          git clone $KERNEL_SOURCE -b $KERNEL_BRANCH kernel --depth=1

      - name: Download KernelSU
        if: env.PATCH_KERNEL_SU == 'true'
        run: |
          cd ./kernel

          # fetch source
          rm -rf KernelSU 2>/dev/null || true
          git clone https://github.com/tiann/KernelSU

          # disable update
          sed -i '/^git.*pull$/d' ./KernelSU/kernel/setup.sh

          # find latest tag
          git -C KernelSU checkout $(git -C KernelSU log --tags --simplify-by-decoration --pretty=format:"%H" -1)
          echo "KERNEL_SU_VERSION=$(git -C KernelSU tag -l --contains HEAD)" >> $GITHUB_ENV

      - name: Patch KernelSU
        if: env.PATCH_KERNEL_SU == 'true'
        run: |
          cd ./kernel

          # automatic patch
          bash ./KernelSU/kernel/setup.sh
          echo "CONFIG_MODULES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_KPROBES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "KERNEL_SUFFIX=$KERNEL_SUFFIX-KernelSU-$KERNEL_SU_VERSION" >> $GITHUB_ENV
      
      - name: Download Anykernel3
        run: |
          # Clone AK3
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

          echo "AK3_DIR=$GITHUB_WORKSPACE/AnyKernel3" >> $GITHUB_ENV

      - name: Build kernel
        run: |
          cd ./kernel
          export PATH="$PREBUILTS_CLANG_PATH/bin:$PATH"

          # Build
          for STEP in "$KERNEL_CONFIG" "";do
            make -j$(nproc --all) \
              O=out ARCH=arm64 \
              CC="ccache clang" \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=$PREBUILTS_GCC_AOSP_PATH/bin/aarch64-linux-android- \
              $KERNEL_BUILD_ARGS $STEP
          done

          # Copy kernel image
          cp ./out/arch/arm64/boot/$KERNEL_OUT $AK3_DIR/

      - name: Build DTBO
        if: env.KERNEL_NEED_DTBO == 'true'
        run: |
          # Build
          [ ! -f ./kernel/out/arch/arm64/boot/dtbo.img ] && \
            $PREBUILTS_LIBUFDT_PATH/utils/src/mkdtboimg.py create --page_size=4096 ./kernel/out/arch/arm64/boot/dtbo.img $(find ./kernel/out/arch/arm64/boot/dts/ -name '*.dtbo')
          # Check
          cp ./kernel/out/arch/arm64/boot/dtbo.img $AK3_DIR/

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}${{ env.KERNEL_SUFFIX }}-${{ env.BUILD_TIME }}
          path: AnyKernel3/*

