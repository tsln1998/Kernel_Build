name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: "checkout"
        uses: actions/checkout@v3

      - name: "env::load"
        id: env
        uses: duskmoon314/action-load-env@v1
        with:
          files: |
            env

      - name: "system::prepare"
        run: |
          sudo apt update >/dev/null 2>/dev/null
          sudo apt install -y $(cat .syspkgs)

      - name: "ccache::cache"
        id: ccache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ccache
          key: ccache-${{ github.run_id }}
          restore-keys: |
            ccache
      
      - name: "ccache::prepare"
        run: |
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/ccache" >> $GITHUB_ENV
        
      - name: "ccache::setup"
        run: |
          ccache -M 1.5G

      - name: "toolchains::cache"
        id: toolchains
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/toolchains
          key: toolchains-${{ hashFiles('env') }}-${{ github.run_id }}
          restore-keys: |
            toolchains-${{ hashFiles('env') }}
      
      - name: "toolchains::prepare"
        run: |
          # setup path
          echo "PREBUILTS_CLANG_PATH=$GITHUB_WORKSPACE/toolchains/clang" >> $GITHUB_ENV
          echo "PREBUILTS_GCC_AOSP_PATH=$GITHUB_WORKSPACE/toolchains/gcc-aosp" >> $GITHUB_ENV
          echo "PREBUILTS_LIBUFDT_PATH=$GITHUB_WORKSPACE/toolchains/libufdt" >> $GITHUB_ENV
      
      - name: "toolchains::setup"
        run: |
          # create download path
          PREBUILTS_DOWNLOAD_PATH=$GITHUB_WORKSPACE/download
          mkdir -p $PREBUILTS_DOWNLOAD_PATH
          
          # download function
          _fetch_unpack_tgz() {
              if [ ! -d $3 ]; then
                curl -L $1 -o $2
                mkdir -p $3
                tar -C $3 -zxvf $2
              fi
          }
          
          # invoke
          _fetch_unpack_tgz $PACKAGE_CLANG $PREBUILTS_DOWNLOAD_PATH/$(basename $PACKAGE_CLANG) $PREBUILTS_CLANG_PATH
          _fetch_unpack_tgz $PACKAGE_GCC_AOSP $PREBUILTS_DOWNLOAD_PATH/$(basename $PACKAGE_GCC_AOSP) $PREBUILTS_GCC_AOSP_PATH
          _fetch_unpack_tgz $PACKAGE_LIBUFDT $PREBUILTS_DOWNLOAD_PATH/$(basename $PACKAGE_LIBUFDT) $PREBUILTS_LIBUFDT_PATH

      - name: "release::setup"
        run: |
          echo "KBUILD_BUILD_HOST=Github" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: "kernel::download"
        run: |
          git clone $KERNEL_SOURCE -b $KERNEL_BRANCH kernel --depth=1

      - name: "kernelsu::download"
        if: env.PATCH_KERNEL_SU == 'true'
        run: |
          cd ./kernel

          # fetch source
          [ ! -d KernelSU ] && \
            git clone https://github.com/tiann/KernelSU

      - name: "kernelsu::patch"
        if: env.PATCH_KERNEL_SU == 'true'
        run: |
          cd ./kernel

          # automatic patch
          bash ./KernelSU/kernel/setup.sh
          echo "CONFIG_MODULES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_KPROBES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/$KERNEL_CONFIG
          echo "KERNEL_SUFFIX=$KERNEL_SUFFIX-KernelSU" >> $GITHUB_ENV
      
      - name: "anykernel3::download"
        run: |
          # Clone AK3
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

          echo "AK3_PATH=$GITHUB_WORKSPACE/AnyKernel3" >> $GITHUB_ENV

      - name: "kernel::build"
        run: |
          cd ./kernel
          export PATH="$PREBUILTS_CLANG_PATH/bin:$PATH"

          # Build
          for STEP in "$KERNEL_CONFIG" "";do
            make -j$(nproc --all) \
              O=out ARCH=arm64 \
              CC="ccache clang" \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=$PREBUILTS_GCC_AOSP_PATH/bin/aarch64-linux-android- \
              $KERNEL_BUILD_ARGS $STEP
          done

          # Copy kernel image
          cp ./out/arch/arm64/boot/$KERNEL_OUT $AK3_PATH/

      - name: "dtbo::build"
        if: env.KERNEL_NEED_DTBO == 'true'
        run: |
          # Build
          [ ! -f ./kernel/out/arch/arm64/boot/dtbo.img ] && \
            $PREBUILTS_LIBUFDT_PATH/utils/src/mkdtboimg.py create --page_size=4096 ./kernel/out/arch/arm64/boot/dtbo.img $(find ./kernel/out/arch/arm64/boot/dts/ -name '*.dtbo')
          # Check
          cp ./kernel/out/arch/arm64/boot/dtbo.img $AK3_PATH/

      - name: "artifact::upload"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}${{ env.KERNEL_SUFFIX }}-${{ env.BUILD_TIME }}
          path: ${{ env.AK3_PATH }}/*

